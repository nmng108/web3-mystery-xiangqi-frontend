/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MysteryChineseChess {
  export type MatchResultStruct = {
    winnerIndex: BigNumberish;
    resultType: BigNumberish;
    increasingElo: BigNumberish;
    decreasingElo: BigNumberish;
  };

  export type MatchResultStructOutput = [
    winnerIndex: bigint,
    resultType: bigint,
    increasingElo: bigint,
    decreasingElo: bigint
  ] & {
    winnerIndex: bigint;
    resultType: bigint;
    increasingElo: bigint;
    decreasingElo: bigint;
  };

  export type PlayerStruct = {
    playerAddress: AddressLike;
    playerName: string;
    elo: BigNumberish;
    tableId: BigNumberish;
  };

  export type PlayerStructOutput = [
    playerAddress: string,
    playerName: string,
    elo: bigint,
    tableId: bigint
  ] & {
    playerAddress: string;
    playerName: string;
    elo: bigint;
    tableId: bigint;
  };

  export type PlayerPieceStruct = {
    color: BigNumberish;
    piece: BigNumberish;
    unfolded: boolean;
  };

  export type PlayerPieceStructOutput = [
    color: bigint,
    piece: bigint,
    unfolded: boolean
  ] & { color: bigint; piece: bigint; unfolded: boolean };

  export type PositionStruct = { row: BigNumberish; column: BigNumberish };

  export type PositionStructOutput = [row: bigint, column: bigint] & {
    row: bigint;
    column: bigint;
  };

  export type MatchStruct = {
    id: BigNumberish;
    gameMode: BigNumberish;
    players: [AddressLike, AddressLike];
    stake: BigNumberish;
    timeControl: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    gameStatus: BigNumberish;
    matchResult: MysteryChineseChess.MatchResultStruct;
    board: MysteryChineseChess.PlayerPieceStruct[][];
    steps: [
      MysteryChineseChess.PositionStruct,
      MysteryChineseChess.PositionStruct
    ][];
  };

  export type MatchStructOutput = [
    id: bigint,
    gameMode: bigint,
    players: [string, string],
    stake: bigint,
    timeControl: bigint,
    startTimestamp: bigint,
    endTimestamp: bigint,
    gameStatus: bigint,
    matchResult: MysteryChineseChess.MatchResultStructOutput,
    board: MysteryChineseChess.PlayerPieceStructOutput[][],
    steps: [
      MysteryChineseChess.PositionStructOutput,
      MysteryChineseChess.PositionStructOutput
    ][]
  ] & {
    id: bigint;
    gameMode: bigint;
    players: [string, string];
    stake: bigint;
    timeControl: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    gameStatus: bigint;
    matchResult: MysteryChineseChess.MatchResultStructOutput;
    board: MysteryChineseChess.PlayerPieceStructOutput[][];
    steps: [
      MysteryChineseChess.PositionStructOutput,
      MysteryChineseChess.PositionStructOutput
    ][];
  };

  export type TableStruct = {
    id: BigNumberish;
    gameMode: BigNumberish;
    name: string;
    players: [AddressLike, AddressLike];
    hostIndex: BigNumberish;
    stake: BigNumberish;
    timeControl: BigNumberish;
    matchId: BigNumberish;
  };

  export type TableStructOutput = [
    id: bigint,
    gameMode: bigint,
    name: string,
    players: [string, string],
    hostIndex: bigint,
    stake: bigint,
    timeControl: bigint,
    matchId: bigint
  ] & {
    id: bigint;
    gameMode: bigint;
    name: string;
    players: [string, string];
    hostIndex: bigint;
    stake: bigint;
    timeControl: bigint;
    matchId: bigint;
  };
}

export interface MysteryChineseChessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BLACK"
      | "MAX_GAME_DURATION"
      | "RED"
      | "createTable"
      | "exitTable"
      | "getAllMatches"
      | "getAllPlayers"
      | "getAllTables"
      | "getMatch"
      | "getPlayer"
      | "getTable"
      | "initializeTables"
      | "isPlayer"
      | "joinTable"
      | "matches"
      | "move"
      | "offerDraw"
      | "originalPieces"
      | "owner"
      | "playerIndexes"
      | "players"
      | "registerPlayer"
      | "renounceOwnership"
      | "resign"
      | "startNewMatch"
      | "tables"
      | "transferOwnership"
      | "typeTableMapping"
      | "verifyCheckmate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MatchEnded"
      | "NewGameStarted"
      | "NewPlayer"
      | "NewTableCreated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BLACK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_GAME_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createTable",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitTable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTables",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeTables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinTable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerDraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "originalPieces",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerIndexes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startNewMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tables",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "typeTableMapping",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCheckmate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BLACK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_GAME_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitTable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeTables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinTable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offerDraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "originalPieces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startNewMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tables", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeTableMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCheckmate",
    data: BytesLike
  ): Result;
}

export namespace MatchEndedEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    matchResult: MysteryChineseChess.MatchResultStruct,
    winner: AddressLike,
    loser: AddressLike
  ];
  export type OutputTuple = [
    matchId: bigint,
    matchResult: MysteryChineseChess.MatchResultStructOutput,
    winner: string,
    loser: string
  ];
  export interface OutputObject {
    matchId: bigint;
    matchResult: MysteryChineseChess.MatchResultStructOutput;
    winner: string;
    loser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGameStartedEvent {
  export type InputTuple = [
    gameName: string,
    player1: AddressLike,
    player2: AddressLike
  ];
  export type OutputTuple = [
    gameName: string,
    player1: string,
    player2: string
  ];
  export interface OutputObject {
    gameName: string;
    player1: string;
    player2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPlayerEvent {
  export type InputTuple = [player: MysteryChineseChess.PlayerStruct];
  export type OutputTuple = [player: MysteryChineseChess.PlayerStructOutput];
  export interface OutputObject {
    player: MysteryChineseChess.PlayerStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTableCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    hostAddress: AddressLike
  ];
  export type OutputTuple = [id: bigint, name: string, hostAddress: string];
  export interface OutputObject {
    id: bigint;
    name: string;
    hostAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MysteryChineseChess extends BaseContract {
  connect(runner?: ContractRunner | null): MysteryChineseChess;
  waitForDeployment(): Promise<this>;

  interface: MysteryChineseChessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BLACK: TypedContractMethod<[], [bigint], "view">;

  MAX_GAME_DURATION: TypedContractMethod<[], [bigint], "view">;

  RED: TypedContractMethod<[], [bigint], "view">;

  createTable: TypedContractMethod<
    [gameMode: BigNumberish, name: string, stake: BigNumberish],
    [void],
    "nonpayable"
  >;

  exitTable: TypedContractMethod<[tableId: BigNumberish], [void], "nonpayable">;

  getAllMatches: TypedContractMethod<
    [],
    [MysteryChineseChess.MatchStructOutput[]],
    "view"
  >;

  getAllPlayers: TypedContractMethod<
    [],
    [MysteryChineseChess.PlayerStructOutput[]],
    "view"
  >;

  getAllTables: TypedContractMethod<
    [gameMode: BigNumberish, page: BigNumberish, size: BigNumberish],
    [MysteryChineseChess.TableStructOutput[]],
    "view"
  >;

  getMatch: TypedContractMethod<
    [id: BigNumberish],
    [MysteryChineseChess.MatchStructOutput],
    "view"
  >;

  getPlayer: TypedContractMethod<
    [_addr: AddressLike],
    [MysteryChineseChess.PlayerStructOutput],
    "view"
  >;

  getTable: TypedContractMethod<
    [id: BigNumberish],
    [MysteryChineseChess.TableStructOutput],
    "view"
  >;

  initializeTables: TypedContractMethod<[], [void], "payable">;

  isPlayer: TypedContractMethod<[_addr: AddressLike], [boolean], "view">;

  joinTable: TypedContractMethod<[tableId: BigNumberish], [void], "nonpayable">;

  matches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        MysteryChineseChess.MatchResultStructOutput
      ] & {
        id: bigint;
        gameMode: bigint;
        stake: bigint;
        timeControl: bigint;
        startTimestamp: bigint;
        endTimestamp: bigint;
        gameStatus: bigint;
        matchResult: MysteryChineseChess.MatchResultStructOutput;
      }
    ],
    "view"
  >;

  move: TypedContractMethod<
    [
      sourceRow: BigNumberish,
      sourceCol: BigNumberish,
      destRow: BigNumberish,
      destCol: BigNumberish
    ],
    [boolean],
    "payable"
  >;

  offerDraw: TypedContractMethod<[matchId: BigNumberish], [void], "payable">;

  originalPieces: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  playerIndexes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  players: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        playerAddress: string;
        playerName: string;
        elo: bigint;
        tableId: bigint;
      }
    ],
    "view"
  >;

  registerPlayer: TypedContractMethod<
    [_name: string],
    [MysteryChineseChess.PlayerStructOutput],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resign: TypedContractMethod<[matchId: BigNumberish], [void], "payable">;

  startNewMatch: TypedContractMethod<
    [tableId: BigNumberish],
    [MysteryChineseChess.MatchStructOutput],
    "payable"
  >;

  tables: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        gameMode: bigint;
        name: string;
        hostIndex: bigint;
        stake: bigint;
        timeControl: bigint;
        matchId: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  typeTableMapping: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  verifyCheckmate: TypedContractMethod<
    [matchId: BigNumberish],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BLACK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_GAME_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createTable"
  ): TypedContractMethod<
    [gameMode: BigNumberish, name: string, stake: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exitTable"
  ): TypedContractMethod<[tableId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllMatches"
  ): TypedContractMethod<[], [MysteryChineseChess.MatchStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllPlayers"
  ): TypedContractMethod<
    [],
    [MysteryChineseChess.PlayerStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllTables"
  ): TypedContractMethod<
    [gameMode: BigNumberish, page: BigNumberish, size: BigNumberish],
    [MysteryChineseChess.TableStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMatch"
  ): TypedContractMethod<
    [id: BigNumberish],
    [MysteryChineseChess.MatchStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [_addr: AddressLike],
    [MysteryChineseChess.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTable"
  ): TypedContractMethod<
    [id: BigNumberish],
    [MysteryChineseChess.TableStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeTables"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "isPlayer"
  ): TypedContractMethod<[_addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinTable"
  ): TypedContractMethod<[tableId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "matches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        MysteryChineseChess.MatchResultStructOutput
      ] & {
        id: bigint;
        gameMode: bigint;
        stake: bigint;
        timeControl: bigint;
        startTimestamp: bigint;
        endTimestamp: bigint;
        gameStatus: bigint;
        matchResult: MysteryChineseChess.MatchResultStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "move"
  ): TypedContractMethod<
    [
      sourceRow: BigNumberish,
      sourceCol: BigNumberish,
      destRow: BigNumberish,
      destCol: BigNumberish
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "offerDraw"
  ): TypedContractMethod<[matchId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "originalPieces"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerIndexes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        playerAddress: string;
        playerName: string;
        elo: bigint;
        tableId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerPlayer"
  ): TypedContractMethod<
    [_name: string],
    [MysteryChineseChess.PlayerStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resign"
  ): TypedContractMethod<[matchId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "startNewMatch"
  ): TypedContractMethod<
    [tableId: BigNumberish],
    [MysteryChineseChess.MatchStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tables"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        gameMode: bigint;
        name: string;
        hostIndex: bigint;
        stake: bigint;
        timeControl: bigint;
        matchId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typeTableMapping"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyCheckmate"
  ): TypedContractMethod<[matchId: BigNumberish], [void], "payable">;

  getEvent(
    key: "MatchEnded"
  ): TypedContractEvent<
    MatchEndedEvent.InputTuple,
    MatchEndedEvent.OutputTuple,
    MatchEndedEvent.OutputObject
  >;
  getEvent(
    key: "NewGameStarted"
  ): TypedContractEvent<
    NewGameStartedEvent.InputTuple,
    NewGameStartedEvent.OutputTuple,
    NewGameStartedEvent.OutputObject
  >;
  getEvent(
    key: "NewPlayer"
  ): TypedContractEvent<
    NewPlayerEvent.InputTuple,
    NewPlayerEvent.OutputTuple,
    NewPlayerEvent.OutputObject
  >;
  getEvent(
    key: "NewTableCreated"
  ): TypedContractEvent<
    NewTableCreatedEvent.InputTuple,
    NewTableCreatedEvent.OutputTuple,
    NewTableCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "MatchEnded(uint256,tuple,address,address)": TypedContractEvent<
      MatchEndedEvent.InputTuple,
      MatchEndedEvent.OutputTuple,
      MatchEndedEvent.OutputObject
    >;
    MatchEnded: TypedContractEvent<
      MatchEndedEvent.InputTuple,
      MatchEndedEvent.OutputTuple,
      MatchEndedEvent.OutputObject
    >;

    "NewGameStarted(string,address,address)": TypedContractEvent<
      NewGameStartedEvent.InputTuple,
      NewGameStartedEvent.OutputTuple,
      NewGameStartedEvent.OutputObject
    >;
    NewGameStarted: TypedContractEvent<
      NewGameStartedEvent.InputTuple,
      NewGameStartedEvent.OutputTuple,
      NewGameStartedEvent.OutputObject
    >;

    "NewPlayer(tuple)": TypedContractEvent<
      NewPlayerEvent.InputTuple,
      NewPlayerEvent.OutputTuple,
      NewPlayerEvent.OutputObject
    >;
    NewPlayer: TypedContractEvent<
      NewPlayerEvent.InputTuple,
      NewPlayerEvent.OutputTuple,
      NewPlayerEvent.OutputObject
    >;

    "NewTableCreated(uint256,string,address)": TypedContractEvent<
      NewTableCreatedEvent.InputTuple,
      NewTableCreatedEvent.OutputTuple,
      NewTableCreatedEvent.OutputObject
    >;
    NewTableCreated: TypedContractEvent<
      NewTableCreatedEvent.InputTuple,
      NewTableCreatedEvent.OutputTuple,
      NewTableCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
