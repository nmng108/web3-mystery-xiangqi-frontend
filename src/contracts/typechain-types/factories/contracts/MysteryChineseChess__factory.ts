/* Autogenerated file. Do not edit manually. */
/* tslint:disable */

import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { PayableOverrides } from '../../common';
import type { MysteryChineseChess, MysteryChineseChessInterface } from '../../contracts/MysteryChineseChess';

const _abi = [
  {
    inputs: [],
    stateMutability: 'payable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'message',
        type: 'string',
      },
    ],
    name: 'InvalidAction',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    name: 'OwnableInvalidOwner',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'OwnableUnauthorizedAccount',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'message',
        type: 'string',
      },
    ],
    name: 'ResourceNotFound',
    type: 'error',
  },
  {
    inputs: [],
    name: 'Unauthorized',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'matchId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'playerAddress',
        type: 'address',
      },
    ],
    name: 'ApprovedDrawOffer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'matchId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'playerAddress',
        type: 'address',
      },
    ],
    name: 'DeclinedDrawOffer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'playerAddress',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'tableId',
        type: 'uint256',
      },
    ],
    name: 'ExitedTable',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'playerAddress',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'tableId',
        type: 'uint256',
      },
    ],
    name: 'JoinedTable',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'enum MysteryChineseChess.GameMode',
            name: 'gameMode',
            type: 'uint8',
          },
          {
            internalType: 'address[2]',
            name: 'players',
            type: 'address[2]',
          },
          {
            internalType: 'uint32',
            name: 'stake',
            type: 'uint32',
          },
          {
            internalType: 'uint24',
            name: 'timeControl',
            type: 'uint24',
          },
          {
            internalType: 'uint256',
            name: 'startTimestamp',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'endTimestamp',
            type: 'uint256',
          },
          {
            internalType: 'enum MysteryChineseChess.MatchStatus',
            name: 'matchStatus',
            type: 'uint8',
          },
          {
            components: [
              {
                internalType: 'uint8',
                name: 'winnerIndex',
                type: 'uint8',
              },
              {
                internalType: 'uint8',
                name: 'offererIndex',
                type: 'uint8',
              },
              {
                internalType: 'enum MysteryChineseChess.MatchResultType',
                name: 'resultType',
                type: 'uint8',
              },
              {
                internalType: 'uint32',
                name: 'increasingElo',
                type: 'uint32',
              },
              {
                internalType: 'uint32',
                name: 'decreasingElo',
                type: 'uint32',
              },
            ],
            internalType: 'struct MysteryChineseChess.MatchResult',
            name: 'matchResult',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint8',
                name: 'color',
                type: 'uint8',
              },
              {
                internalType: 'enum MysteryChineseChess.Piece',
                name: 'piece',
                type: 'uint8',
              },
              {
                internalType: 'bool',
                name: 'unfolded',
                type: 'bool',
              },
            ],
            internalType: 'struct MysteryChineseChess.PlayerPiece[9][10]',
            name: 'board',
            type: 'tuple[9][10]',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'playerIndex',
                    type: 'uint8',
                  },
                  {
                    components: [
                      {
                        internalType: 'uint8',
                        name: 'y',
                        type: 'uint8',
                      },
                      {
                        internalType: 'uint8',
                        name: 'x',
                        type: 'uint8',
                      },
                    ],
                    internalType: 'struct MysteryChineseChess.Position',
                    name: 'oldPosition',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        internalType: 'uint8',
                        name: 'y',
                        type: 'uint8',
                      },
                      {
                        internalType: 'uint8',
                        name: 'x',
                        type: 'uint8',
                      },
                    ],
                    internalType: 'struct MysteryChineseChess.Position',
                    name: 'newPosition',
                    type: 'tuple',
                  },
                  {
                    internalType: 'uint256',
                    name: 'timestamp',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct MysteryChineseChess.MoveDetails',
                name: 'details',
                type: 'tuple',
              },
              {
                internalType: 'string[2]',
                name: 'signatures',
                type: 'string[2]',
              },
            ],
            internalType: 'struct MysteryChineseChess.Move[]',
            name: 'moves',
            type: 'tuple[]',
          },
        ],
        indexed: false,
        internalType: 'struct MysteryChineseChess.Match',
        name: '_match',
        type: 'tuple',
      },
    ],
    name: 'MatchEnded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'matchId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address[2]',
        name: 'players',
        type: 'address[2]',
      },
    ],
    name: 'NewMatchStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'playerAddress',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'playerName',
            type: 'string',
          },
          {
            internalType: 'int32',
            name: 'elo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'tableId',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct MysteryChineseChess.Player',
        name: 'player',
        type: 'tuple',
      },
    ],
    name: 'NewPlayer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'enum MysteryChineseChess.GameMode',
            name: 'gameMode',
            type: 'uint8',
          },
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'address[2]',
            name: 'players',
            type: 'address[2]',
          },
          {
            internalType: 'uint8',
            name: 'hostIndex',
            type: 'uint8',
          },
          {
            internalType: 'uint32',
            name: 'stake',
            type: 'uint32',
          },
          {
            internalType: 'uint24',
            name: 'timeControl',
            type: 'uint24',
          },
          {
            internalType: 'uint256',
            name: 'matchId',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct MysteryChineseChess.Table',
        name: 'table',
        type: 'tuple',
      },
    ],
    name: 'NewTableCreated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'matchId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'playerAddress',
        type: 'address',
      },
    ],
    name: 'OfferingDraw',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'playerAddress',
        type: 'address',
      },
    ],
    name: 'UpdatedPlayerInfo',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'enum MysteryChineseChess.GameMode',
            name: 'gameMode',
            type: 'uint8',
          },
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'address[2]',
            name: 'players',
            type: 'address[2]',
          },
          {
            internalType: 'uint8',
            name: 'hostIndex',
            type: 'uint8',
          },
          {
            internalType: 'uint32',
            name: 'stake',
            type: 'uint32',
          },
          {
            internalType: 'uint24',
            name: 'timeControl',
            type: 'uint24',
          },
          {
            internalType: 'uint256',
            name: 'matchId',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct MysteryChineseChess.Table',
        name: 'table',
        type: 'tuple',
      },
    ],
    name: 'UpdatedTable',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'oldTableId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'newTableId',
        type: 'uint256',
      },
    ],
    name: 'UpdatedTableId',
    type: 'event',
  },
  {
    inputs: [],
    name: 'BLACK',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_TIME_CONTROL',
    outputs: [
      {
        internalType: 'uint24',
        name: '',
        type: 'uint24',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'RED',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'enum MysteryChineseChess.GameMode',
        name: 'gameMode',
        type: 'uint8',
      },
      {
        internalType: 'string',
        name: 'name',
        type: 'string',
      },
      {
        internalType: 'uint32',
        name: 'stake',
        type: 'uint32',
      },
    ],
    name: 'createTable',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'drawVotes',
    outputs: [
      {
        internalType: 'enum MysteryChineseChess.Vote',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'tableId',
        type: 'uint256',
      },
    ],
    name: 'exitTable',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllMatches',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'enum MysteryChineseChess.GameMode',
            name: 'gameMode',
            type: 'uint8',
          },
          {
            internalType: 'address[2]',
            name: 'players',
            type: 'address[2]',
          },
          {
            internalType: 'uint32',
            name: 'stake',
            type: 'uint32',
          },
          {
            internalType: 'uint24',
            name: 'timeControl',
            type: 'uint24',
          },
          {
            internalType: 'uint256',
            name: 'startTimestamp',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'endTimestamp',
            type: 'uint256',
          },
          {
            internalType: 'enum MysteryChineseChess.MatchStatus',
            name: 'matchStatus',
            type: 'uint8',
          },
          {
            components: [
              {
                internalType: 'uint8',
                name: 'winnerIndex',
                type: 'uint8',
              },
              {
                internalType: 'uint8',
                name: 'offererIndex',
                type: 'uint8',
              },
              {
                internalType: 'enum MysteryChineseChess.MatchResultType',
                name: 'resultType',
                type: 'uint8',
              },
              {
                internalType: 'uint32',
                name: 'increasingElo',
                type: 'uint32',
              },
              {
                internalType: 'uint32',
                name: 'decreasingElo',
                type: 'uint32',
              },
            ],
            internalType: 'struct MysteryChineseChess.MatchResult',
            name: 'matchResult',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint8',
                name: 'color',
                type: 'uint8',
              },
              {
                internalType: 'enum MysteryChineseChess.Piece',
                name: 'piece',
                type: 'uint8',
              },
              {
                internalType: 'bool',
                name: 'unfolded',
                type: 'bool',
              },
            ],
            internalType: 'struct MysteryChineseChess.PlayerPiece[9][10]',
            name: 'board',
            type: 'tuple[9][10]',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'playerIndex',
                    type: 'uint8',
                  },
                  {
                    components: [
                      {
                        internalType: 'uint8',
                        name: 'y',
                        type: 'uint8',
                      },
                      {
                        internalType: 'uint8',
                        name: 'x',
                        type: 'uint8',
                      },
                    ],
                    internalType: 'struct MysteryChineseChess.Position',
                    name: 'oldPosition',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        internalType: 'uint8',
                        name: 'y',
                        type: 'uint8',
                      },
                      {
                        internalType: 'uint8',
                        name: 'x',
                        type: 'uint8',
                      },
                    ],
                    internalType: 'struct MysteryChineseChess.Position',
                    name: 'newPosition',
                    type: 'tuple',
                  },
                  {
                    internalType: 'uint256',
                    name: 'timestamp',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct MysteryChineseChess.MoveDetails',
                name: 'details',
                type: 'tuple',
              },
              {
                internalType: 'string[2]',
                name: 'signatures',
                type: 'string[2]',
              },
            ],
            internalType: 'struct MysteryChineseChess.Move[]',
            name: 'moves',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct MysteryChineseChess.Match[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllPlayers',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'playerAddress',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'playerName',
            type: 'string',
          },
          {
            internalType: 'int32',
            name: 'elo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'tableId',
            type: 'uint256',
          },
        ],
        internalType: 'struct MysteryChineseChess.Player[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'enum MysteryChineseChess.GameMode',
        name: 'gameMode',
        type: 'uint8',
      },
      {
        internalType: 'uint24',
        name: 'page',
        type: 'uint24',
      },
      {
        internalType: 'uint16',
        name: 'size',
        type: 'uint16',
      },
    ],
    name: 'getAllTables',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'enum MysteryChineseChess.GameMode',
            name: 'gameMode',
            type: 'uint8',
          },
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'address[2]',
            name: 'players',
            type: 'address[2]',
          },
          {
            internalType: 'uint8',
            name: 'hostIndex',
            type: 'uint8',
          },
          {
            internalType: 'uint32',
            name: 'stake',
            type: 'uint32',
          },
          {
            internalType: 'uint24',
            name: 'timeControl',
            type: 'uint24',
          },
          {
            internalType: 'uint256',
            name: 'matchId',
            type: 'uint256',
          },
        ],
        internalType: 'struct MysteryChineseChess.Table[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'id',
        type: 'uint256',
      },
    ],
    name: 'getMatch',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'enum MysteryChineseChess.GameMode',
            name: 'gameMode',
            type: 'uint8',
          },
          {
            internalType: 'address[2]',
            name: 'players',
            type: 'address[2]',
          },
          {
            internalType: 'uint32',
            name: 'stake',
            type: 'uint32',
          },
          {
            internalType: 'uint24',
            name: 'timeControl',
            type: 'uint24',
          },
          {
            internalType: 'uint256',
            name: 'startTimestamp',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'endTimestamp',
            type: 'uint256',
          },
          {
            internalType: 'enum MysteryChineseChess.MatchStatus',
            name: 'matchStatus',
            type: 'uint8',
          },
          {
            components: [
              {
                internalType: 'uint8',
                name: 'winnerIndex',
                type: 'uint8',
              },
              {
                internalType: 'uint8',
                name: 'offererIndex',
                type: 'uint8',
              },
              {
                internalType: 'enum MysteryChineseChess.MatchResultType',
                name: 'resultType',
                type: 'uint8',
              },
              {
                internalType: 'uint32',
                name: 'increasingElo',
                type: 'uint32',
              },
              {
                internalType: 'uint32',
                name: 'decreasingElo',
                type: 'uint32',
              },
            ],
            internalType: 'struct MysteryChineseChess.MatchResult',
            name: 'matchResult',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint8',
                name: 'color',
                type: 'uint8',
              },
              {
                internalType: 'enum MysteryChineseChess.Piece',
                name: 'piece',
                type: 'uint8',
              },
              {
                internalType: 'bool',
                name: 'unfolded',
                type: 'bool',
              },
            ],
            internalType: 'struct MysteryChineseChess.PlayerPiece[9][10]',
            name: 'board',
            type: 'tuple[9][10]',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'playerIndex',
                    type: 'uint8',
                  },
                  {
                    components: [
                      {
                        internalType: 'uint8',
                        name: 'y',
                        type: 'uint8',
                      },
                      {
                        internalType: 'uint8',
                        name: 'x',
                        type: 'uint8',
                      },
                    ],
                    internalType: 'struct MysteryChineseChess.Position',
                    name: 'oldPosition',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        internalType: 'uint8',
                        name: 'y',
                        type: 'uint8',
                      },
                      {
                        internalType: 'uint8',
                        name: 'x',
                        type: 'uint8',
                      },
                    ],
                    internalType: 'struct MysteryChineseChess.Position',
                    name: 'newPosition',
                    type: 'tuple',
                  },
                  {
                    internalType: 'uint256',
                    name: 'timestamp',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct MysteryChineseChess.MoveDetails',
                name: 'details',
                type: 'tuple',
              },
              {
                internalType: 'string[2]',
                name: 'signatures',
                type: 'string[2]',
              },
            ],
            internalType: 'struct MysteryChineseChess.Move[]',
            name: 'moves',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct MysteryChineseChess.Match',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'getPlayer',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'playerAddress',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'playerName',
            type: 'string',
          },
          {
            internalType: 'int32',
            name: 'elo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'tableId',
            type: 'uint256',
          },
        ],
        internalType: 'struct MysteryChineseChess.Player',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'id',
        type: 'uint256',
      },
    ],
    name: 'getTable',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'enum MysteryChineseChess.GameMode',
            name: 'gameMode',
            type: 'uint8',
          },
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'address[2]',
            name: 'players',
            type: 'address[2]',
          },
          {
            internalType: 'uint8',
            name: 'hostIndex',
            type: 'uint8',
          },
          {
            internalType: 'uint32',
            name: 'stake',
            type: 'uint32',
          },
          {
            internalType: 'uint24',
            name: 'timeControl',
            type: 'uint24',
          },
          {
            internalType: 'uint256',
            name: 'matchId',
            type: 'uint256',
          },
        ],
        internalType: 'struct MysteryChineseChess.Table',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'initializeTables',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_addr',
        type: 'address',
      },
    ],
    name: 'isPlayer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'tableId',
        type: 'uint256',
      },
    ],
    name: 'joinTable',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'matchIndexes',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'matches',
    outputs: [
      {
        internalType: 'uint256',
        name: 'id',
        type: 'uint256',
      },
      {
        internalType: 'enum MysteryChineseChess.GameMode',
        name: 'gameMode',
        type: 'uint8',
      },
      {
        internalType: 'uint32',
        name: 'stake',
        type: 'uint32',
      },
      {
        internalType: 'uint24',
        name: 'timeControl',
        type: 'uint24',
      },
      {
        internalType: 'uint256',
        name: 'startTimestamp',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'endTimestamp',
        type: 'uint256',
      },
      {
        internalType: 'enum MysteryChineseChess.MatchStatus',
        name: 'matchStatus',
        type: 'uint8',
      },
      {
        components: [
          {
            internalType: 'uint8',
            name: 'winnerIndex',
            type: 'uint8',
          },
          {
            internalType: 'uint8',
            name: 'offererIndex',
            type: 'uint8',
          },
          {
            internalType: 'enum MysteryChineseChess.MatchResultType',
            name: 'resultType',
            type: 'uint8',
          },
          {
            internalType: 'uint32',
            name: 'increasingElo',
            type: 'uint32',
          },
          {
            internalType: 'uint32',
            name: 'decreasingElo',
            type: 'uint32',
          },
        ],
        internalType: 'struct MysteryChineseChess.MatchResult',
        name: 'matchResult',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'sourceRow',
        type: 'uint8',
      },
      {
        internalType: 'uint8',
        name: 'sourceCol',
        type: 'uint8',
      },
      {
        internalType: 'uint8',
        name: 'destRow',
        type: 'uint8',
      },
      {
        internalType: 'uint8',
        name: 'destCol',
        type: 'uint8',
      },
    ],
    name: 'move',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'normalModeAdvancedTableIndexes',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'normalModeBeginnerTableIndexes',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'normalModeIntermediateTableIndexes',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'originalPieces',
    outputs: [
      {
        internalType: 'enum MysteryChineseChess.Piece',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'playerIndexes',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'players',
    outputs: [
      {
        internalType: 'address',
        name: 'playerAddress',
        type: 'address',
      },
      {
        internalType: 'string',
        name: 'playerName',
        type: 'string',
      },
      {
        internalType: 'int32',
        name: 'elo',
        type: 'int32',
      },
      {
        internalType: 'uint256',
        name: 'tableId',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'rankModeTableIndexes',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: '_name',
        type: 'string',
      },
    ],
    name: 'registerPlayer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'matchId',
        type: 'uint256',
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'uint8',
                name: 'playerIndex',
                type: 'uint8',
              },
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'y',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint8',
                    name: 'x',
                    type: 'uint8',
                  },
                ],
                internalType: 'struct MysteryChineseChess.Position',
                name: 'oldPosition',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'y',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint8',
                    name: 'x',
                    type: 'uint8',
                  },
                ],
                internalType: 'struct MysteryChineseChess.Position',
                name: 'newPosition',
                type: 'tuple',
              },
              {
                internalType: 'uint256',
                name: 'timestamp',
                type: 'uint256',
              },
            ],
            internalType: 'struct MysteryChineseChess.MoveDetails',
            name: 'details',
            type: 'tuple',
          },
          {
            internalType: 'string[2]',
            name: 'signatures',
            type: 'string[2]',
          },
        ],
        internalType: 'struct MysteryChineseChess.Move[]',
        name: 'moves',
        type: 'tuple[]',
      },
    ],
    name: 'resign',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'matchId',
        type: 'uint256',
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'uint8',
                name: 'playerIndex',
                type: 'uint8',
              },
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'y',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint8',
                    name: 'x',
                    type: 'uint8',
                  },
                ],
                internalType: 'struct MysteryChineseChess.Position',
                name: 'oldPosition',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'y',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint8',
                    name: 'x',
                    type: 'uint8',
                  },
                ],
                internalType: 'struct MysteryChineseChess.Position',
                name: 'newPosition',
                type: 'tuple',
              },
              {
                internalType: 'uint256',
                name: 'timestamp',
                type: 'uint256',
              },
            ],
            internalType: 'struct MysteryChineseChess.MoveDetails',
            name: 'details',
            type: 'tuple',
          },
          {
            internalType: 'string[2]',
            name: 'signatures',
            type: 'string[2]',
          },
        ],
        internalType: 'struct MysteryChineseChess.Move[]',
        name: 'moves',
        type: 'tuple[]',
      },
    ],
    name: 'resignAndExitTable',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'tableId',
        type: 'uint256',
      },
    ],
    name: 'startNewMatch',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'tables',
    outputs: [
      {
        internalType: 'uint256',
        name: 'id',
        type: 'uint256',
      },
      {
        internalType: 'enum MysteryChineseChess.GameMode',
        name: 'gameMode',
        type: 'uint8',
      },
      {
        internalType: 'string',
        name: 'name',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: 'hostIndex',
        type: 'uint8',
      },
      {
        internalType: 'uint32',
        name: 'stake',
        type: 'uint32',
      },
      {
        internalType: 'uint24',
        name: 'timeControl',
        type: 'uint24',
      },
      {
        internalType: 'uint256',
        name: 'matchId',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'playerName',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'tableId',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'setsTableId',
        type: 'bool',
      },
    ],
    name: 'updatePlayer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'tableId',
        type: 'uint256',
      },
      {
        internalType: 'string',
        name: 'name',
        type: 'string',
      },
      {
        internalType: 'uint24',
        name: 'timeControl',
        type: 'uint24',
      },
      {
        internalType: 'uint32',
        name: 'stake',
        type: 'uint32',
      },
    ],
    name: 'updateTable',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'matchId',
        type: 'uint256',
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'uint8',
                name: 'playerIndex',
                type: 'uint8',
              },
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'y',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint8',
                    name: 'x',
                    type: 'uint8',
                  },
                ],
                internalType: 'struct MysteryChineseChess.Position',
                name: 'oldPosition',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint8',
                    name: 'y',
                    type: 'uint8',
                  },
                  {
                    internalType: 'uint8',
                    name: 'x',
                    type: 'uint8',
                  },
                ],
                internalType: 'struct MysteryChineseChess.Position',
                name: 'newPosition',
                type: 'tuple',
              },
              {
                internalType: 'uint256',
                name: 'timestamp',
                type: 'uint256',
              },
            ],
            internalType: 'struct MysteryChineseChess.MoveDetails',
            name: 'details',
            type: 'tuple',
          },
          {
            internalType: 'string[2]',
            name: 'signatures',
            type: 'string[2]',
          },
        ],
        internalType: 'struct MysteryChineseChess.Move[]',
        name: 'moves',
        type: 'tuple[]',
      },
    ],
    name: 'verifyCheckmate',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608080604052331562000ded5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600160406200005f62000e03565b600281526000602082015201526016805462ffffff19166201000217905560405161014081016001600160401b03811182821017620009f55760405260005b610140811062000d845750604051608081016001600160401b03811182821017620009f55760405260008152620000d462000e43565b60008152602082015260006040820152600060608201526001549068010000000000000000821015620009f557600182018060015582101562000baf5760016000528051600283901b7fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690810180546001600160a01b0319166001600160a01b03939093169290921790915560208201518051919291906001600160401b038211620009f5576200018e60018660021b8601015462000e63565b601f811162000d46575b50602090601f831160011462000cc257826060936003969593620001d49360009262000cb6575b50508160011b916000199060031b1c19161790565b60018660021b850101555b600285811b840101604082015163ffffffff198254169063ffffffff1617905501519260021b0101556200021262000e23565b60008082526020820152604051906001600160401b03610100830190811190831117620009f557610100820160405260008252600060208301526200025662000e43565b600081526040830152606082015260006080820152600060a0820152600060c0820152600060e08201526003549068010000000000000000821015620009f557600182018060035582101562000baf5760036000526020600020908051600784028301556020810151600681101562000b7357620002dd9060016007860285010162000eb9565b60408101518051906001600160401b038211620009f557620003086002600787028601015462000e63565b601f811162000c78575b50602090601f831160011462000bf7576200034692916000918362000beb5750508160011b916000199060031b1c19161790565b600260078502840101555b606081015160005b6002811062000bc557505090600760e08360ff608060069601511660058488028601015460a08301519164ffffffff0067ffffff000000000060c086015160281b169360081b169160018060401b03191617171760058488028601015501519302010155620003c762000e23565b600080825260208201526040519091906001600160401b0360a0820190811190821117620009f55760a081016040526000815260026020820152600060408201526000606082015260006080820152604051928361016081011060018060401b0361016086011117620009f5576101608401604052600084526000602085015260408401526000606084015260006080840152600060a0840152600060c0840152600260e084015261010083015261012082015260606101408201526008549068010000000000000000821015620009f557600182018060085582101562000baf5760086000526020600020908051606484028301556020810151600681101562000b7357620004e09060016064860285010162000eb9565b604081015160005b6002811062000b8957505060046064840283010163ffffffff60608301511681549066ffffff00000000608085015160201b169166ffffffffffffff19161717905560a08101516005606485028401015560c08101516006606485028401015560e0810151600381101562000b73576007606485028401908101805460ff191660ff938416179055610100830151805160089283018054602084015161ff00951b949094169190941661ffff1990931692909217919091178255604081015190600a82101562000b7357825462ff00006affffffff00000000000000608066ffffffff000000606086015160181b1694015160381b169360101b169062010000600160581b03191617171790556101208101516009606485028401016000915b600a831062000afb57505050610140015190815191680100000000000000008311620009f55760648402820160630180549084905580841062000a0b575b509060646020606393019402010160005260206000206000925b8284106200080e57604051604160f81b8152600b806001830152602180922060ff19815416905581604051602160f91b815282600182015220600160ff1982541617905581604051604360f81b815282600182015220600260ff1982541617905581604051601160fa1b815282600182015220600360ff1982541617905581604051604560f81b815282600182015220600460ff1982541617905581604051602360f91b815282600182015220600560ff1982541617905581604051604760f81b815282600182015220600660ff1982541617905581604051600960fb1b815282600182015220600760ff1982541617905581604051604960f81b815282600182015220600860ff1982541617905560405190602560f91b8252600182015220600960ff19825416179055600c546015549068050403020102030405918260018060481b031980931617600c55161760155567060000000000060067ff0000000000ff00198181600e541617600e5560135416176013556807000700070007000768ff00ff00ff00ff00ff198181600f541617600f556012541617601255604051615d50908162000ed38239f35b602081516060815160ff81511660ff19875416178655620008576001870160ff868085015182815116831985541617845501511661ff0082549160081b169061ff001916179055565b6200088b6002870160ff86604085015182815116831985541617845501511661ff0082549160081b169061ff001916179055565b015160038501550151600483016000915b60028310620008bc57505050600660206001920192019301929062000660565b80518051906001600160401b038211620009f557620008dc845462000e63565b601f8111620009b3575b50602090601f83116001146200093e57926200092283600195946020948796600092620009325750508160011b916000199060031b1c19161790565b85555b019201920191906200089c565b015190508d80620001bf565b908460005260206000209160005b601f19851681106200099a575083602093600196938796938794601f1981161062000980575b505050811b01855562000925565b015160001960f88460031b161c191690558c808062000972565b919260206001819286850151815501940192016200094c565b620009e390856000526020600020601f850160051c81019160208610620009ea575b601f0160051c019062000ea0565b89620008e6565b9091508190620009d5565b634e487b7160e01b600052604160045260246000fd5b600681810204810362000ae557600684810204840362000ae55760636064860284010160005260206000208460060281015b826006028201811062000a5257505062000646565b60008155600060018201556000600282015560006003820155600481015b60068201811062000a85575060060162000a3d565b8062000a946001925462000e63565b8062000aa3575b500162000a70565b601f8111831462000abb5750600081555b8962000a9b565b60009082825262000adb601f60208420920160051c820185830162000ea0565b8183555562000ab4565b634e487b7160e01b600052601160045260246000fd5b8051826000915b6009831062000b2257505050600960206001920192019201919062000608565b805160ff815116908354926020820151600881101562000b7357600194859461ff0062ff000060406020970151151560101b169360081b169162ffffff191617171785550192019201919062000b02565b634e487b7160e01b600052602160045260246000fd5b81516001600160a01b0316600260648702860183010155602090910190600101620004e8565b634e487b7160e01b600052603260045260246000fd5b81516001600160a01b031660036007870286018301015560209091019060010162000359565b015190508780620001bf565b91906002600787028601016000526020600020906000935b601f198416851062000c5c576001945083601f1981161062000c42575b505050811b016002600785028401015562000351565b015160001960f88460031b161c1916905586808062000c2c565b8181015183556020948501946001909301929091019062000c0f565b62000caf906002600788028701016000526020600020601f850160051c81019160208610620009ea57601f0160051c019062000ea0565b8662000312565b015190508980620001bf565b9060018660021b86010160005260206000209160005b601f198516811062000d2d575092600395949260019260609583601f1981161062000d14575b505050811b0160018660021b85010155620001df565b015160001983891b60f8161c1916905588808062000cfe565b9192602060018192868501518155019401920162000cd8565b62000d7d9060018760021b8701016000526020600020601f850160051c81019160208610620009ea57601f0160051c019062000ea0565b8662000198565b6040516101208082016001600160401b03811183821017620009f55760405260005b81811062000dbd575050828201526020016200009e565b90602080959262000dcd62000e03565b600081526000838201526000604082015281860152019091945062000da6565b631e4fbdf760e01b815260006004820152602490fd5b60405190606082016001600160401b03811183821017620009f557604052565b60408051919082016001600160401b03811183821017620009f557604052565b60405190602082016001600160401b03811183821017620009f557604052565b90600182811c9216801562000e95575b602083101462000e7f57565b634e487b7160e01b600052602260045260246000fd5b91607f169162000e73565b81811062000eac575050565b6000815560010162000ea0565b90600681101562000b735760ff8019835416911617905556fe608080604052600436101561001357600080fd5b60003560e01c9081630971e31614613f2e5750806309c95e1014613eee578063115577bc14613e12578063195e251f14613dd6578063200301e214613d85578063225b031d14613d6957806336d18b6714613d4d5780633823bb0314613bfb57806338b8abe6146139e35780633d092b3d146138fb5780634768d4ef1461384e5780634f5ba44d146137fd578063559028fc146134425780635c12cd4b1461333a5780636f86c80614612462578063715018a61461240957806371671bf2146123585780638da5cb5b1461232f57806391628795146122f15780639b64fa8a14611b8b578063b3446f8514611898578063b36fec0c14611846578063c17c5a451461175d578063c77e9dcd146114f1578063d2ccd05714611449578063df39493c14611036578063e1e20c2014610fef578063e77b4b1a14610cbd578063ea4973ab14610744578063ea77647b146106f3578063eed79abb146106a2578063efa1c482146105cf578063efb79e35146105b1578063f1819eb9146102be578063f2fde38b146102365763f71d96cb146101ab57600080fd5b3461023157602036600319011261023157600435600154811015610231576101d2906148a3565b5060018060a01b03815416604051916101f9836101f281600185016145b8565b038461449c565b6003600282015491015461021f6040519485948552608060208601526080850190613f86565b9160030b604084015260608301520390f35b600080fd5b34610231576020366003190112610231576004356001600160a01b0381811691829003610231576102656156b0565b81156102a5576000548260018060a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b3461023157602036600319011261023157600435604051629c95e160e41b8152336004820152602081602481305afa9081156105a557600091610576575b50156105655761030b8161455f565b5054156104cd5760606103266103208361455f565b50614b91565b015160018060a01b039081808251163314159182610553575b5050610511576000600361035233615840565b015561035d8261455f565b506003810180548316330361050a5760005b610378816153cd565b93806103848685614c24565b905460039190911b1c16156104695791600080516020615c9b8339815191529593918593600160ff61040e981614610413575b505060ff916103e96103d46005936103ce876153cd565b90614c24565b81549060018060a01b039060031b1b19169055565b01911660ff198254161790555b60408051338152602081019290925290918291820190565b0390a1005b60ff939161043a6104589261042b8698600597614c24565b90549060031b1c169187614c24565b90919060018060a01b038084549260031b9316831b921b1916179055565b6000939092509050816103e96103b7565b505050505061049c61048e610489600361048233615840565b01546156dc565b615635565b61049661567d565b906158c7565b6104a58161455f565b5054156104cd5761040e816104c8600080516020615c9b83398151915293615972565b6103f6565b604051633bca200b60e21b81526020600482015260146024820152731518589b1948191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b600161036f565b6040516312a441ad60e01b8152602060048201526019602482015278596f7520617265206e6f7420696e2074686973207461626c6560381b6044820152606490fd5b6020919250015116331415818461033f565b6040516282b42960e81b8152600490fd5b610598915060203d60201161059e575b610590818361449c565b810190614c34565b826102fc565b503d610586565b6040513d6000823e3d90fd5b34610231576000366003190112610231576020604051621b77408152f35b346102315760003660031901126102315760018054906105ee8261464e565b906105fc604051928361449c565b828252602080830193846001600052826000206000915b83831061067b5750505050604051928184019082855251809152604084019160408260051b86010195926000905b83821061064e5786880387f35b9091929394838061066a839a603f198b82030186528951614520565b999701959493919091019101610641565b9460048582999761068e859a989a61504e565b815201920192019190969496959395610613565b34610231576020366003190112610231576004356005548110156102315760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00154604051908152602090f35b34610231576020366003190112610231576004356007548110156102315760076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880154604051908152602090f35b61074d3661470b565b9080600052600960205260406000205415610c6457806000526009602052604061078361077d82600020546143a1565b50614dc5565b015180516001600160a01b03163314159081610ca5575b50610c065780600052600960205260406000205415610c645780600052600960205260406107ce61077d82600020546143a1565b015180516001600160a01b03163314159081610c4c575b50610c065760005260096020526108006040600020546143a1565b5060028101549091906001600160a01b03163303610bfe576000905b610825826153cd565b9161087e60405161083581614413565b600a608060ff808816958685521692836020820152600560408201528260608201520152600886019260ff19845416178355829061ff0082549160081b169061ff001916179055565b80546affffffffffffffffff00001916670a0000000a05000017905560078301805460ff19166002179055805190600160401b8211610b63576063840154826063860155808310610b79575b50602001906063840160005260206000206000925b8284106109cf57600080516020615c7b83398151915261040e87876109078160028401614c24565b60018060a01b0391549060031b1c166000526002602052600261092e6040600020546148a3565b500161096861095f8254936109458560030b6153b0565b63ffffffff1995861663ffffffff918216179094556153cd565b60028501614c24565b60018060a01b0391549060031b1c166000526002602052600261098f6040600020546148a3565b5001918254916109a18360030b6153de565b169116179055600060066109c060036109b933615840565b015461455f565b500155604051918291826153fc565b602081516060815160ff81511660ff19875416178655610a176001870160ff868085015182815116831985541617845501511661ff0082549160081b169061ff001916179055565b610a4a6002870160ff86604085015182815116831985541617845501511661ff0082549160081b169061ff001916179055565b015160038501550151600483016000915b60028310610a795750505060066020600192019201930192906108df565b80518051906001600160401b038211610b6357610aa082610a9a865461457e565b8661490e565b602090601f8311600114610af35792610ad983600195946020948796600092610ae8575b50508160011b916000199060031b1c19161790565b85555b01920192019190610a5b565b015190508f80610ac4565b908460005260206000209160005b601f1985168110610b4b575083602093600196938796938794601f19811610610b32575b505050811b018555610adc565b015160001960f88460031b161c191690558e8080610b25565b91926020600181928685015181550194019201610b01565b634e487b7160e01b600052604160045260246000fd5b6006818102048103610be8576006838102048303610be8576063850160005260206000208360060281015b8260060282018110610bb75750506108ca565b80600060069255600060018201556000600282015560006003820155610be2828201600483016150ef565b01610ba4565b634e487b7160e01b600052601160045260246000fd5b60019061081c565b6040516312a441ad60e01b815260206004820152601e60248201527f596f7520617265206e6f74206a6f696e696e672074686973206d6174636800006044820152606490fd5b602001516001600160a01b03163314159050836107e5565b604051633bca200b60e21b8152602060048201526018602482015277151a19481b585d18da08191bd95cc81b9bdd08195e1a5cdd60421b6044820152606490fd5b602001516001600160a01b031633141590508361079a565b34610231576080366003190112610231576001600160401b0360043560243582811161023157610cf19036906004016146ed565b9060443562ffffff9182821690818303610231576064359063ffffffff958683169182840361023157610d238161455f565b5054156104cd57610d339061455f565b509781518015159081610f8e575b50610e81575b505091600695939183600080516020615c5b83398151915298969415159081610e6d575b50610e43575b508015159081610e2f575b50610e03575b506040519384936020855280546020860152610da960ff6001830154166040870190613f56565b61012092836060870152610dc46101408701600284016145b8565b94610dd56080880160038501614b5f565b60058301549060ff821660c08901528160081c1660e088015260281c166101008601520154908301520390a1005b610e2990600585019062ffffff60281b82549160281b169062ffffff60281b1916179055565b85610d82565b905082600586015460281c16141587610d7c565b610e6790600587019064ffffffff0082549160081b169064ffffffff001916179055565b87610d71565b905085600588015460081c16141589610d6b565b60028901918051918211610b6357610ea382610e9d855461457e565b8561490e565b602090816001601f851114610f0b575082600080516020615c5b8339815191529b9997959360069b99979593610eef93600092610f005750508160011b916000199060031b1c19161790565b90555b919395978193959750610d47565b015190508d80610ac4565b9190601f198416856000526020600020936000905b828210610f76575050926001928592600080516020615c5b8339815191529e9c9a989660069e9c9a989610610f5d575b505050811b019055610ef2565b015160001960f88460031b161c191690558c8080610f50565b80600186978294978701518155019601940190610f20565b9050604051610fb760208281810194610faa8187858b01613f63565b810103808452018261449c565b5190206002610fd6610fe48c6040519283916020830195869101614c4c565b03601f19810183528261449c565b51902014158a610d41565b3461023157610ffd3661488d565b600a821015610231576009811015610231576110348160ff600c60209560f89560051c01015460405194859360031b161c16614163565bf35b61103f3661470b565b9080600052600960205260406000205415610c6457806000526009602052604061106f61077d82600020546143a1565b015180516001600160a01b03163314159081611431575b50610c065760005260096020526110a16040600020546143a1565b5060028101546001600160a01b03163303611429576000905b82516000198101908111610be85760ff60406110d860029387615152565b51510151511611611421576000925b60ff604051936110f685614413565b858216855216602084015260016040840152600a606084018190526080840152805190600160401b8211610b635760638301548260638501558083106113b2575b50602001906063830160005260206000206000925b8284106112235750505050600881019260ff83511660ff19908186541617855561118e60ff602086015116869061ff0082549160081b169061ff001916179055565b604084015194600a86101561120d57600080516020615c7b8339815191529561040e95825462ff000066ffffffff000000606084015160181b1692608063ffffffff60381b91015160381b169360101b16906affffffffffffffffff000019161717179055600260078401918254161790556109078160028401614c24565b634e487b7160e01b600052602160045260246000fd5b60208151606081516112a060ff82511660ff19908189541617885561126f6001890160ff8880870151828151168685541617845501511661ff0082549160081b169061ff001916179055565b60ff8660028a0192604086015190838251169085541617845501511661ff0082549160081b169061ff001916179055565b015160038501550151600483016000915b600283106112cf57505050600660206001920192019301929061114c565b80518051906001600160401b038211610b63576112f082610a9a865461457e565b602090601f83116001146113425792611328836001959460209487966000926113375750508160011b916000199060031b1c19161790565b85555b019201920191906112b1565b015190503880610ac4565b908460005260206000209160005b601f198516811061139a575083602093600196938796938794601f19811610611381575b505050811b01855561132b565b015160001960f88460031b161c191690558f8080611374565b91926020600181928685015181550194019201611350565b6006818102048103610be8576006838102048303610be8576063840160005260206000208360060281015b82600602820181106113f0575050611137565b8060006006925560006001820155600060028201556000600382015561141b828201600483016150ef565b016113dd565b6001926110e7565b6001906110ba565b602001516001600160a01b0316331415905083611086565b346102315760603660031901126102315760043560068110156102315760243562ffffff81168103610231576044359061ffff821682036102315761148d92615166565b60405160209160208201926020835281518094526040830193602060408260051b8601019301916000955b8287106114c55785850386f35b9091929382806114e1600193603f198a82030186528851613fdc565b96019201960195929190926114b8565b346102315760603660031901126102315760043560068110156102315760249081356001600160401b0381116102315761152f9036906004016140da565b92909160443563ffffffff8116809103610231576003549361158560405191611557836143c0565b338352600060208401526040519761156e896143db565b87895261157e8660208b016148d3565b36916146b6565b604087015260608601526000608086015260a0850152621b774060c0850152600060e08501526115b484614ae7565b8260036115c033615840565b015560028103611644575060045490600160401b82101561163057509161161c61040e92611603856001600080516020615cdb83398151915297016004556140bf565b90919082549060031b91821b91600019901b1916179055565b604051918291602083526020830190613fdc565b634e487b7160e01b60009081526041600452fd5b6003810361168a575060055490600160401b82101561163057509161168561040e92611603856001600080516020615cdb83398151915297016005556140a4565b61161c565b600481036116cb575060065490600160401b82101561163057509161168561040e92611603856001600080516020615cdb8339815191529701600655614089565b60050361170a5760075490600160401b82101561163057509161168561040e92611603856001600080516020615cdb8339815191529701600755614058565b6084906025604051916312a441ad60e01b8352602060048401528201527f496e76616c69642047616d654d6f64652e2043616e6e6f7420637265617465206044820152647461626c6560d81b6064820152fd5b346102315760003660031901126102315760085461177a8161464e565b90611788604051928361449c565b80825260086000908152602091828401917ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3835b8383106118235750505050604051918083019381845251809452604083019360408160051b85010192916000955b8287106117f75785850386f35b909192938280611813600193603f198a82030186528851614170565b96019201960195929190926117ea565b606486600192611835859a999a614dc5565b8152019201920191909594956117bc565b34610231576118543661488d565b90600052600a602052604060002080548210156102315760209160ff9160005260f8836000208260051c01549160031b161c166040519061189481614107565b8152f35b3461023157602080600319360112610231576001600160401b0390600435828111610231576118cb9036906004016140da565b919060405193629c95e160e41b855233600486015260249483818781305afa9081156105a557600091611b6e575b50611b2e578315611af2576001906119248254936040519661191a8861442e565b33885236916146b6565b848601908152604086019060008252606087019260008452600160401b861015611add578486018555611956866148a3565b959095611ac857885186546001600160a01b0319166001600160a01b03919091161786559151805190998387019391928311611630575061199b82610e9d855461457e565b8790601f8311600114611a3f5750816003959493926119f2927f1a9f78dbaab8e275c9024eed0763e6dbd23496aa15c942786fb1f868cb5832b29c600092611a345750508160011b916000199060031b1c19161790565b90555b60028401905163ffffffff198254169063ffffffff1617905551910155336000526002825260406000205561040e604051928284938452830190614520565b015190508c80610ac4565b9190601f1982169a84600052896000209b60005b818110611ab35750917f1a9f78dbaab8e275c9024eed0763e6dbd23496aa15c942786fb1f868cb5832b29c9184600399989796959410611a9b575b505050811b0190556119f5565b015160001983891b60f8161c191690558b8080611a8e565b838301518e559c85019c928b01928b01611a53565b89634e487b7160e01b60005260006004526000fd5b88634e487b7160e01b60005260416004526000fd5b6040516312a441ad60e01b815260048101849052601481870152734e616d652063616e6e6f7420626520656d70747960601b6044820152606490fd5b60405162461bcd60e51b81526004810184905260198187015278141b185e595c88185b1c9958591e481c9959da5cdd195c9959603a1b6044820152606490fd5b611b859150843d861161059e57610590818361449c565b866118f9565b611b943661470b565b9080600052600960205260406000205415610c64578060005260096020526040611bc461077d82600020546143a1565b015180516001600160a01b031633141590816122d9575b50610c0657611c16604051611bef816143c0565b601581527429ba30b93a103932b9b4b3b710333ab731ba34b7b760591b6020820152615886565b80600052600960205260406000205415610c64578060005260096020526040611c4561077d82600020546143a1565b015180516001600160a01b031633141590816122c1575b50610c06576000526009602052611c776040600020546143a1565b5060028101549091906001600160a01b031633036122b9576000905b611c9c826153cd565b91611cac60405161083581614413565b80546affffffffffffffffff00001916670a0000000a05000017905560078301805460ff19166002179055805190600160401b8211610b6357606384015482606386015580831061224a575b50602001906063840160005260206000206000925b8284106120c857600080516020615c7b833981519152611d5c8787611d358160028401614c24565b905460018060a01b039160031b1c166000526002602052600261092e6040600020546148a3565b0390a1611d98604051611d6e816143c0565b601881527729ba30b93a1032bc34ba2a30b1363290333ab731ba34b7b760411b6020820152615886565b6000806001600160a01b03611dac33615840565b5416604051602081019163161765e160e11b8352602482015260248152611dd281614449565b51906a636f6e736f6c652e6c6f675afa50611df9611df4600361048233615840565b615886565b6003611e0433615840565b0154604051629c95e160e41b8152336004820152602081602481305afa9081156105a5576000916120a9575b501561056557611e3f8161455f565b5054156104cd576060611e546103208361455f565b015180516001600160a01b03163314159081612091575b5061051157604051611e7c81614449565b602181527f28696e736964652920537461727420657869745461626c652066756e6374696f6020820152611eba603760f91b91826040820152615886565b60006003611ec733615840565b0155611ed28261455f565b506003810180549091906001600160a01b03163303612089576000915b611ef8836153cd565b92611f53604051611f0881614449565b603381527f28696e736964652920726574726965766564207461626c65206461746120696e6020820152721032bc34ba2a30b1363290333ab731ba34b7b760691b6040820152615886565b611f5d8483614c24565b905460039190911b1c6001600160a01b03161561203c57926103f69261040e9592600080516020615c9b8339815191529795600160ff851614611fff575b5060ff91611fb16103d46005936103ce876153cd565b01911660ff198254161790555b60405190611fcb82614449565b602182527f28696e736964652920456e64656420657869745461626c652066756e6374696f60208301526040820152615886565b9161202f60ff9361043a6120168597600596614c24565b905460039190911b1c6001600160a01b03169187614c24565b6000939092909150611f9b565b5050505061205461048e610489600361048233615840565b61205d8261455f565b5054156104cd57816103f661040e92612084600080516020615c9b83398151915295615972565b611fbe565b600191611eef565b602001516001600160a01b0316331415905082611e6b565b6120c2915060203d60201161059e57610590818361449c565b82611e30565b602081516060815160ff81511660ff198754161786556121106001870160ff868085015182815116831985541617845501511661ff0082549160081b169061ff001916179055565b6121436002870160ff86604085015182815116831985541617845501511661ff0082549160081b169061ff001916179055565b015160038501550151600483016000915b60028310612172575050506006602060019201920193019290611d0d565b80518051906001600160401b038211610b635761219382610a9a865461457e565b602090601f83116001146121da57926121cb83600195946020948796600092610ae85750508160011b916000199060031b1c19161790565b85555b01920192019190612154565b908460005260206000209160005b601f1985168110612232575083602093600196938796938794601f19811610612219575b505050811b0185556121ce565b015160001960f88460031b161c191690558e808061220c565b919260206001819286850151815501940192016121e8565b6006818102048103610be8576006838102048303610be8576063850160005260206000208360060281015b8260060282018110612288575050611cf8565b806000600692556000600182015560006002820155600060038201556122b3828201600483016150ef565b01612275565b600190611c93565b602001516001600160a01b0316331415905083611c5c565b602001516001600160a01b0316331415905083611bdb565b34610231576020366003190112610231576004356001600160a01b038116908190036102315760005260026020526020604060002054604051908152f35b34610231576000366003190112610231576000546040516001600160a01b039091168152602090f35b34610231576020366003190112610231576004356003548110156102315761237f9061455f565b50805460ff600183015416916040516123a68161239f81600286016145b8565b038261449c565b62ffffff6123de60066005850154940154926123cd60405197889788526020880190613f56565b60e0604087015260e0860190613f86565b9260ff8116606086015263ffffffff8160081c16608086015260281c1660a084015260c08301520390f35b34610231576000366003190112610231576124226156b0565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461023157602036600319011261023157600435604051629c95e160e41b8152336004820152602081602481305afa9081156105a55760009161331b575b5015610565576124af8161455f565b5054156104cd5760606124c46103208361455f565b015180516001600160a01b03163314159081613303575b50610511576124e99061455f565b5060038101546001600160a01b03161580156132ee575b6132a8578054604051903360601b602083015242603483015260548201526054815261252b8161442e565b6020815191012090816006820155612541614d42565b916040519061254f82614480565b61255882614cd0565b60405161256481614480565b61256d81614cd0565b6040519461257a86614480565b61258386614cd0565b6040519461259086614480565b61259986614cd0565b604051946125a686614480565b6125af86614cd0565b604051946125bc86614480565b6125c586614cd0565b604051966125d288614480565b6125db88614cd0565b604051966125e888614480565b6125f188614cd0565b604051916125fe83614480565b61260783614cd0565b6040519761261489614480565b61261d89614cd0565b85885260208801528b60408801528a6060880152608087015260a08601528760c08601528660e08601526101008501528461012085015260405161266081614449565b600081526001602082015260016040820152608083015260405161268381614449565b60018152600160208201526001604082015260808601526126e76040516126a981614449565b602681527f5b5f696e6974426f6172645d204372656174656420313020726f777320666f7260208201526508189bd85c9960d21b6040820152615886565b6126fb6040516126f681614464565b614d09565b6040519361270885614464565b6002855260076020860152600660408601526007606086015260056080860152600360a0860152600760c0860152600260e08601526004610100860152600761012086015260036101408601526006610160860152600761018086015260056101a086015260046101c08601526040519461278286614464565b61278b86614d09565b600f60006000195b600f821061320057505050506127f06040516127ae81614449565b602a81527f5b5f696e6974426f6172645d2047656e657261746564206f72646572206f66206020820152697265642070696563657360b01b6040820152615886565b6127ff6040516126f681614464565b6040519361280c85614464565b6002855260076020860152600660408601526007606086015260056080860152600360a0860152600760c0860152600260e08601526004610100860152600761012086015260036101408601526006610160860152600761018086015260056101a086015260046101c08601526040519461288686614464565b61288f86614d09565b600f60006000195b600f821061311357505050506128f66040516128b281614449565b602c81527f5b5f696e6974426f6172645d2047656e657261746564206f72646572206f662060208201526b626c61636b2070696563657360a01b6040820152615886565b60009860005b60ff80821690600982101561298b57600482146129735791612961828c8f826129538f8f8f6129679a61294d9161293c61296d9e61295a99168096615875565b51612947838361503d565b5261503d565b50615875565b519261503d565b528c61503d565b506148c2565b9a6148c2565b996128fc565b50509961296761298561296d92615865565b9b6148c2565b505050965096899350612a10612a3092998c6129e86040516129ac81614449565b60368152600080516020615cbb833981519152602082015275666972737420726f77206f662065616368207369646560501b6040820152615886565b60e0612a0760ff84166129fb818d615875565b5160208501528b615875565b519101526148c2565b9060e0612a0760ff8416612a24818a615875565b51602085015288615875565b95612a7c604051612a4081614449565b60368152600080516020615cbb833981519152602082015275746869726420726f77206f662065616368207369646560501b6040820152615886565b6000965b600960ff89161015612afa5780612ac460ff612ae09316612aa1818a615875565b51612aaf60ff8d168961503d565b52612abd60ff8c168861503d565b5087615875565b51612ad260ff8b168a61503d565b5261296160ff8a168961503d565b9660ff60028183160111610be85760ff1660020196612a80565b5087612b47604051612b0b81614449565b60368152600080516020615cbb833981519152602082015275666f75746820726f77206f662065616368207369646560501b6040820152615886565b612b79604051612b56816143c0565b601181527010dbdb9cdd1c9d58dd195908189bd85c99607a1b6020820152615886565b60ff60018301541690600583015462ffffff60405191612b9883614413565b600083526002602084015260006040840152600a6060840152600a6080840152612bd460405195612bc8876143f7565b888752602087016148d3565b604051612be48160038901614b5f565b612bed816143c0565b604086015263ffffffff8160081c16606086015260281c1660808401524260a0840152600060c0840152600060e08401526101008301526101208201526060610140820152612c64604051612c41816143c0565b6011815270086dedce6e8e4eac6e8cac840dac2e8c6d607b1b6020820152615886565b600854600160401b811015610b6357806001612c8392016008556143a1565b9190916130fd57805182556020810151600681101561120d57612ca990600184016148df565b604081015160005b600281106130dd5750506004820163ffffffff60608301511681549066ffffff00000000608085015160201b169166ffffffffffffff19161717905560a0810151600583015560c081015160068301556007820160e0820151612d1381614107565b612d1c81614107565b60ff8019835416911617905561010081015160ff81511660ff19600885015416176008840155612d6760ff602083015116600885019061ff0082549160081b169061ff001916179055565b604081015190600a82101561120d57600884015462ff000066ffffffff000000606084015160181b1692608063ffffffff60381b91015160381b169360101b16906affffffffffffffffff000019161717176008830155610120810151600983016000915b600a8310613069575050506101400151805190600160401b8211610b63576063830154826063850155808310612ffa575b50602060639101920160005260206000206000925b828410612e78578585600854916000198301928311610be857612e756060927f0e3e1d0e77b3d9d48881e33085e74d23a87a9447f9b8d8ff919c1a511be1e501948360005260096020526040600020556040519283526003602084019101614b5f565ba1005b602081516060815160ff81511660ff19875416178655612ec06001870160ff868085015182815116831985541617845501511661ff0082549160081b169061ff001916179055565b612ef36002870160ff86604085015182815116831985541617845501511661ff0082549160081b169061ff001916179055565b015160038501550151600483016000915b60028310612f22575050506006602060019201920193019290612e12565b80518051906001600160401b038211610b6357612f4382610a9a865461457e565b602090601f8311600114612f8a5792612f7b83600195946020948796600092610ae85750508160011b916000199060031b1c19161790565b85555b01920192019190612f04565b908460005260206000209160005b601f1985168110612fe2575083602093600196938796938794601f19811610612fc9575b505050811b018555612f7e565b015160001960f88460031b161c191690558e8080612fbc565b91926020600181928685015181550194019201612f98565b6006818102048103610be8576006838102048303610be8576063840160005260206000208360060281015b8260060282018110613038575050612dfd565b80600060069255600060018201556000600282015560006003820155613063828201600483016150ef565b01613025565b8051826000915b6009831061308e575050506009602060019201920192019190612dcc565b805160ff815116908354926020820151600881101561120d57600194859461ff0062ff000060406020970151151560101b169360081b169162ffffff1916171717855501920192019190613070565b81516001600160a01b031660028286010155602090910190600101612cb1565b634e487b7160e01b600052600060045260246000fd5b60409d9c9d5160208101913360601b835242603483015260f81b60548201526035815261313f81614449565b51902060ff8316156131ea5760ff600191818516900616916131696131648487615875565b615099565b6131856040519161317983614449565b84835260208301614d97565b60006040820152613196828c615875565b526131a1818b615875565b5060006131de6131b385830b96615865565b946131d860ff8716916131d36131cc613164858d615875565b918b615875565b614d97565b87615875565b520190919c9b9c612897565b634e487b7160e01b600052601260045260246000fd5b60409c9b9c5160208101913360601b835242603483015260f81b60548201526035815261322c81614449565b51902060ff8316156131ea5760ff600191818516900616916132516131648487615875565b61326e6040519161326183614449565b6000835260208301614d97565b6000604082015261327f828c615875565b5261328a818b615875565b50600061329c6131b385830b96615865565b520190919b9a9b612793565b6040516312a441ad60e01b815260206004820152601b60248201527f4e6f7420656e6f75676820706c617965727320746f20737461727400000000006044820152606490fd5b5060048101546001600160a01b031615612500565b602001516001600160a01b03163314159050826124db565b613334915060203d60201161059e57610590818361449c565b826124a0565b3461023157602080600319360112610231576004356001600160a01b0381169081900361023157600060606040516133718161442e565b82815281858201528260408201520152604051629c95e160e41b81528160048201528281602481305afa9081156105a557600091613425575b50156133e757600052600281526133ce6133c86040600020546148a3565b5061504e565b906133e3604051928284938452830190614520565b0390f35b604051633bca200b60e21b8152600481018390526015602482015274141b185e595c88191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606490fd5b61343c9150833d851161059e57610590818361449c565b836133aa565b60803660031901126102315760043560ff808216809203610231576024918235908282168092036102315760443592808416809403610231576064359481861680960361023157600a8310806137f3575b806137e9575b806137df575b1561023157604051635c12cd4b60e01b81523360048201526000818381305afa80156105a55760009061370d575b60609150018051156136be576134e861032060e0925161455f565b0180511561367f5761077d6134fd91516143a1565b604081015180516001600160a01b0390811633036136605750508260005b16906002820361361157613540610120859201519661353a878961502c565b5161503d565b515116036135de57600160406135d08861353a89896135ca8a8a6135838761356c8161353a868961502c565b51613577888861502c565b5190612947838361503d565b5061358e828561502c565b519089519061359c82614449565b60165481811683526135b6828260081c1660208501614d97565b60101c1615158a820152612947838361503d565b5061502c565b510152602060405160018152f35b606490600c6040519162461bcd60e51b8352602060048401528201526b496e76616c6964206d6f766560a01b6044820152fd5b60405162461bcd60e51b8152602060048201526022818501527f596f75206861736e2774206265656e206265696e6720696e20616e79206d61746044820152610c6d60f31b6064820152608490fd5b60203392015116146000146136775782600161351b565b82600261351b565b60405162461bcd60e51b8152602060048201526018818401527711d85b59481a185cdb89dd081899595b881cdd185c9d195960421b6044820152606490fd5b60405162461bcd60e51b8152602060048201526022818401527f596f75206861736e2774206265656e206265696e6720696e20616e79207461626044820152616c6560f01b6064820152608490fd5b503d806000833e61371e818361449c565b81019060209182828203126102315781516001600160401b039283821161023157019260808483031261023157604051926137588461442e565b84516001600160a01b03811681036102315784528185015190811161023157840182601f8201121561023157805161378f8161469b565b9361379d604051958661449c565b818552838284010111610231576137b991838086019101613f63565b82015260408201518060030b8103610231576040820152606091820151818301526134cd565b506009861061349f565b5060098410613499565b50600a8510613493565b34610231576020366003190112610231576004356006548110156102315760066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0154604051908152602090f35b346102315760203660031901126102315760043560085481101561023157613878610180916143a1565b5061103481549160ff600182015416906004810154600582015462ffffff6006840154926138c46138b3600860ff60078901541697016144bd565b96604051998a5260208a0190613f56565b63ffffffff8116604089015260201c166060870152608086015260a08501526138ec81614107565b60c084015260e083019061411e565b3461023157602080600319360112610231576004356060610140604051613921816143f7565b60008152600085820152604051613937816143c0565b6040368237604082015260008382015260006080820152600060a0820152600060c0820152600060e082015260405161396f81614413565b60008152600086820152600060408201526000848201526000608082015261010082015261399b614d42565b6101208201520152806000526009825260406000205415610c6457600052600981526139ce61077d6040600020546143a1565b906133e3604051928284938452830190614170565b34610231576060366003190112610231576001600160401b0360043581811161023157613a149036906004016140da565b9190604435801515810361023157604051629c95e160e41b8152336004820152602093908481602481305afa9081156105a557600091613bde575b5015610565573360005260028452613a6b6040600020546148a3565b509285151580613b94575b613aab575b5050600080516020615cfb8339815191529350613a9d575b50604051338152a1005b600360243591015582613a93565b60019060018501928711610b6357613ac787610e9d855461457e565b600091601f8811600114613b1d57509580613b0892600080516020615cfb83398151915298600092613b125750508160011b916000199060031b1c19161790565b90555b8480613a7b565b013590508880610ac4565b91601f1988168460005287600020936000905b828210613b7d575050916001939189600080516020615cfb8339815191529a9410613b63575b505050811b019055613b0b565b0135600019600384901b60f8161c19169055878080613b56565b848401358655948501949289019290890190613b30565b506040518581019087838337613bb987828a810160008382015203808452018261449c565b51902060405186810190613bd481610fd68460018b01614c4c565b5190201415613a76565b613bf59150853d871161059e57610590818361449c565b86613a4f565b3461023157602036600319011261023157600435613c188161455f565b5054156104cd57613c288161455f565b5060029160038201916004810160018060a01b038082541615613d44575b8085541615613d3b575b600260ff871614613d01578085613cac613c8e7f763c767a5382e600b41ed4384a37ec09f8ca82425090658ecab866f16effc7419961040e99614c24565b81546001600160a01b0360039290921b91821b19163390911b179055565b856003613cb833615840565b01555416159182613cf5575b5050613ce4575b5060408051338152602081019290925290918291820190565b600501805460ff1916905583613ccb565b54161590508580613cc4565b6040516312a441ad60e01b8152602060048201526011602482015270151a19481d18589b19481a5cc8199d5b1b607a1b6044820152606490fd5b60009550613c50565b60019550613c46565b3461023157600036600319011261023157602060405160008152f35b3461023157600036600319011261023157602060405160018152f35b34610231576020366003190112610231576004356004548110156102315760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0154604051908152602090f35b3461023157602036600319011261023157600435613df2614b10565b50613dfc8161455f565b5054156104cd5761161c6103206133e39261455f565b600036600319011261023157613e266156b0565b600180805b613e3157005b60ff81169060148211613eec57613ee182613e4e613ee6946156dc565b6040516020916402937b7b6960dd1b83830152613e8d82602592613e7a81518092888786019101613f63565b810103916005928381018552018361449c565b60405192613e9a846143c0565b6000845260008185015260405194613eb1866143db565b85528401526040830152606082015260006080820152600060a0820152600060c0820152600060e0820152614ae7565b6148c2565b81613e2b565b005b34610231576020366003190112610231576004356001600160a01b0381169081900361023157600052600260205260206040600020541515604051908152f35b3461023157602036600319011261023157602090600435600052600982526040600020548152f35b90600682101561120d5752565b60005b838110613f765750506000910152565b8181015183820152602001613f66565b90602091613f9f81518092818552858086019101613f63565b601f01601f1916010190565b6000915b60028310613fbc57505050565b81516001600160a01b031681526001929092019160209182019101613faf565b9061010060e061401261012085518552613ffe60208701516020870190613f56565b604086015190806040870152850190613f86565b9361402560608201516060860190613fab565b60ff60808201511660a085015263ffffffff60a08201511660c085015262ffffff60c08201511682850152015191015290565b60075481101561407357600760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b60065481101561407357600660005260206000200190600090565b60055481101561407357600560005260206000200190600090565b60045481101561407357600460005260206000200190600090565b9181601f84011215610231578235916001600160401b038311610231576020838186019501011161023157565b6003111561120d57565b90600a82101561120d5752565b60809060ff815116835260ff602082015116602084015261414760408201516040850190614111565b8160608201519163ffffffff8093166060860152015116910152565b90600882101561120d5752565b6123a091828101908251815260209061418f8285015183830190613f56565b60406141a360408601516040840190613fab565b60609063ffffffff606087015116608084015260808601519562ffffff60a0971660a085015260a08101519160c09260c086015260c082015160e09060e087015260e0830151610100906141f681614107565b818801528301519261420e610120948589019061411e565b8084015160006101c089015b600a82106143305750505061014001519961238087015289518098526123c09487868801968a60051b8901019b01996000975b8a89106142635750505050505050505050505090565b909192939495969798999a9b6123bf198282030189528a8d5191818782019387815160ff81511685526142ab848201518587019060ff60208092828151168552015116910152565b6142ca8c8201518387019060ff60208092828151168552015116910152565b015187840152015192878b830152898201939160005b600281106143065750505050806001929e0199019901979a99989695949392919061424d565b919380614321600193959760df198782030188528851613f86565b960194019101918e93926142e0565b8a839d9b9c9d9995969798995182876000915b6009831061436b5750505050610360600192019301910190919b9a999b97969594939761421a565b908394918c600194955160ff815116835261438c8582015186850190614163565b015115158d8201520193019101878f93614343565b6008548110156140735760086000526064602060002091020190600090565b604081019081106001600160401b03821117610b6357604052565b61010081019081106001600160401b03821117610b6357604052565b61016081019081106001600160401b03821117610b6357604052565b60a081019081106001600160401b03821117610b6357604052565b608081019081106001600160401b03821117610b6357604052565b606081019081106001600160401b03821117610b6357604052565b6101e081019081106001600160401b03821117610b6357604052565b61012081019081106001600160401b03821117610b6357604052565b90601f801991011681019081106001600160401b03821117610b6357604052565b906040516144ca81614413565b80925460ff8116825260ff8160081c16602083015260ff8160101c1690600a82101561120d57608091604084015263ffffffff90818160181c16606085015260381c16910152565b359060ff8216820361023157565b9060018060a01b0382511681526060806145496020850151608060208601526080850190613f86565b93604081015160030b6040850152015191015290565b6003548110156140735760036000526007602060002091020190600090565b90600182811c921680156145ae575b602083101461459857565b634e487b7160e01b600052602260045260246000fd5b91607f169161458d565b8054600093926145c78261457e565b9182825260209360019160018116908160001461462f57506001146145ee575b5050505050565b90939495506000929192528360002092846000945b83861061461b575050505001019038808080806145e7565b805485870183015294019385908201614603565b60ff19168685015250505090151560051b0101915038808080806145e7565b6001600160401b038111610b635760051b60200190565b91908260409103126102315760405161467d816143c0565b602061469681839561468e81614512565b855201614512565b910152565b6001600160401b038111610b6357601f01601f191660200190565b9291926146c28261469b565b916146d0604051938461449c565b829481845281830111610231578281602093846000960137010152565b9080601f8301121561023157816020614708933591016146b6565b90565b90604080600319840112610231576004359260248035906001600160401b0380831161023157836023840112156102315782600401359061474b8261464e565b956147588151978861449c565b828752602095848789019460051b8701019581871161023157858101945b8786106147895750505050505050505090565b8535858111610231578201808403602319019060e082126102315760c08651926147b2846143c0565b126102315785516147c28161442e565b6147cd8a8301614512565b81526147dc8660448401614665565b8c8201526147ed8660848401614665565b8782015260c48201356060820152825260e48101359087821161023157018460438201121561023157855190614822826143c0565b81906064810190878211610231578d94929593918c8201915b8183106148575750505083809550820152815201950194614776565b91809496509690929496358b8111610231578f9161487b8f8c9085948701016146ed565b815201930190918e959396949261483b565b6040906003190112610231576004359060243590565b60015481101561407357600160005260206000209060021b0190600090565b60ff1660ff8114610be85760010190565b600682101561120d5752565b90600681101561120d5760ff80198354169116179055565b818110614902575050565b600081556001016148f7565b9190601f811161491d57505050565b614949926000526020600020906020601f840160051c8301931061494b575b601f0160051c01906148f7565b565b909150819061493c565b91906130fd57805182556001602080830151600681101561120d5761497d90600186016148df565b6002906002850160408501518051906001600160401b038211610b63576149a882610e9d855461457e565b8390601f8311600114614a80576149d79291600091836113375750508160011b916000199060031b1c19161790565b90555b60608401519060005b838110614a6357505050505060e0600691614a5c6005850160ff60808401511660ff19825416178155614a3763ffffffff60a085015116829064ffffffff0082549160081b169064ffffffff001916179055565b60c0830151815467ffffff0000000000191660289190911b62ffffff60281b16179055565b0151910155565b82516001600160a01b0316878201600301559181019184016149e3565b90601f1983169184600052856000209260005b878a838310614ad357505050908460019594939210614aba575b505050811b0190556149da565b015160001960f88460031b161c19169055388080614aad565b859682939686015181550195019301614a93565b60035490600160401b821015610b6357614b0a826001614949940160035561455f565b90614955565b60405190614b1d826143db565b8160e060009182815282602082015260606040820152604051614b3f816143c0565b604036823760608201528260808201528260a08201528260c08201520152565b906000905b60028210614b7157505050565b82546001600160a01b031681526001928301929190910190602001614b64565b90604051614b9e816143db565b60e06006829480548452614bbc60ff600183015416602086016148d3565b604051614bd08161239f81600286016145b8565b6040850152604051614be58160038401614b5f565b614bee816143c0565b606085015262ffffff600582015460ff8116608087015263ffffffff8160081c1660a087015260281c1660c08501520154910152565b6002821015614073570190600090565b90816020910312610231575180151581036102315790565b600092918154614c5b8161457e565b92600191808316908115614cb55750600114614c78575b50505050565b9091929394506000526020906020600020906000915b858310614ca45750505050019038808080614c72565b805485840152918301918101614c8e565b60ff1916845250505081151590910201915038808080614c72565b6000805b6101208110614ce257505050565b602090604083815191614cf483614449565b81835281858401528201528185015201614cd4565b6000805b6101e08110614d1b57505050565b602090604083815191614d2d83614449565b81835281858401528201528185015201614d0d565b604090604051610140908181018181106001600160401b03821117610b6357604052809360005b838110614d765750505050565b6020908251614d8481614480565b614d8d81614cd0565b8185015201614d69565b600882101561120d5752565b90604051614db0816143c0565b602060ff829454818116845260081c16910152565b90604051614dd2816143f7565b809280548252614dec60ff600183015416602084016148d3565b604051614dfc8160028401614b5f565b614e05816143c0565b604083015262ffffff600482015463ffffffff8116606085015260201c166080830152600581015460a0830152600681015460c083015260ff600782015416614e4d81614107565b60e0830152614e5e600882016144bd565b61010083015260405161014081018181106001600160401b03821117610b6357604052600982016000825b600a8210614f8b575050509060639161012084015201908154614eab8161464e565b92614eb9604051948561449c565b818452602084019060005260206000206000915b838310614edf57505050506101400152565b604051614eeb816143c0565b604051614ef78161442e565b60ff8454168152614f0a60018501614da3565b6020820152614f1b60028501614da3565b6040820152600384015460608201528152604051614f38816143c0565b600060048501825b60028310614f665750505060019282602092836006950152815201920192019190614ecd565b600160208192604051614f7d8161239f81896145b8565b815201920192019190614f40565b604051806101208101106001600160401b0361012083011117610b63576101208101604052600084825b60098310614fd6575050506020826009926001945201930191019091614e89565b600160208192604051614fe881614449565b60ff86548181168352615002828260081c16868501614d97565b60101c1615156040820152815201920192019190614fb5565b9060028110156140735760051b0190565b90600a8110156140735760051b0190565b9060098110156140735760051b0190565b9060405161505b8161442e565b60606003829460018060a01b0381541684526040516150818161239f81600186016145b8565b60208501526002810154820b60408501520154910152565b51600881101561120d5790565b6150b0815461457e565b90816150ba575050565b81601f600093116001146150cc575055565b9080839182526150eb601f60208420940160051c8401600185016148f7565b5555565b8181106150fa575050565b806151066001926150a6565b016150ef565b62ffffff9081166000190191908211610be857565b91909162ffffff80809416911602918216918203610be857565b91909162ffffff80809416911601918211610be857565b80518210156140735760209160051b010190565b929161ffff16926151768461464e565b92604091615187604051958661449c565b858552601f196151968761464e565b0160005b818110615399575050600681101561120d57801561531557600281036152a8575060049183955b62ffffff90816151d9826151d48961510c565b615121565b16826151fb6151f6846151f1816151d48c549d61510c565b61513b565b61510c565b1681101561529d5783516000806020928381019063f82c50f160e01b825260248681830152815261522b81614449565b51906a636f6e736f6c652e6c6f675afa508782101561529157916151f1816151d4600185615281818f6152718f6151f69b6151fb9d61032092600052600020015461455f565b61527b8383615152565b52615152565b500194919592848895928f61510c565b50505050509350505090565b505050509350505090565b600381036152bc57506005915b83956151c1565b600481036152cd57506006916152b5565b6005036152dc576007916152b5565b6040516312a441ad60e01b815260206004820152601060248201526f496e76616c69642047616d654d6f646560801b6044820152606490fd5b509193905062ffffff8061532c836151d48861510c565b1691600354925b82615345836151f1816151d48c61510c565b168110156153905783811461539057906151f1816151d460018561536e6103206153459861455f565b615378828d615152565b52615383818c615152565b5001935050925050615333565b50505050915090565b6020906153a4614b10565b82828a0101520161519a565b60030b600a0190637fffffff8213637fffffff19831217610be857565b60ff166001039060ff8211610be857565b60030b6009190190637fffffff198212637fffffff831317610be857565b90602082528054602083015261541d60ff6001830154166040840190613f56565b61542d6060830160028301614b5f565b600481015462ffffff63ffffffff9182811660a086015260201c1660c0840152600582015460e0840152600682015461010084015260ff60078301541661547381614107565b610120840152600882015460ff811661014085015260ff8160081c166101608501526154a9610180850160ff8360101c16614111565b601881901c82166101a085015260381c166101c08301526009810160006101e084015b600a82106155d957505050606301906123a0808201528154806123c08301526123e091828101928260051b820101936000526020600020926000915b83831061551757505050505090565b90919293946123df1982820301835260e0810160ff8754168252615550602083016001890160ff60209154818116845260081c16910152565b61556f606083016002890160ff60209154818116845260081c16910152565b600387015460a083015260e060c083015290610120810191600488019160005b600281106155b157505050506020600660019297019301930191939290615508565b90919293602060016155cd819360df19878203018852886145b8565b9601940192910161558f565b600083825b600983106155fd575050506009610360600192019301910190916154cc565b60016060819260ff8554818116835261561e60208401838360081c16614163565b60101c1615156040820152019201920191906155de565b9061494960316040518094700383630bcb2b9173a30b13632a4b2101e9607d1b602083015261566d8151809260208686019101613f63565b810103601181018552018361449c565b6040519061568a826143c0565b60178252762e20537461727420746f2064656c657465207461626c6560481b6020830152565b6000546001600160a01b031633036156c457565b60405163118cdaa760e01b8152336004820152602490fd5b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b80821015615832575b506d04ee2d6d415b85acef810000000080831015615823575b50662386f26fc1000080831015615814575b506305f5e10080831015615805575b50612710808310156157f6575b5060648210156157e6575b600a809210156157dc575b60019081602160018601956157718761469b565b9661577f604051988961449c565b80885261578e601f199161469b565b01366020890137860101905b6157a6575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156157d75791908261579a565b61579f565b916001019161575d565b9190606460029104910191615752565b60049193920491019138615747565b6008919392049101913861573a565b6010919392049101913861572b565b60209193920491019138615719565b604093508104915038615700565b6001600160a01b0316600090815260026020526040902054615861906148a3565b5090565b60ff168015610be8576000190190565b90600f8110156140735760051b0190565b600080916040516158b481610fd6602082019463104c13eb60e21b8652602060248401526044830190613f86565b51906a636f6e736f6c652e6c6f675afa50565b60009190610fd66158b484936040519283916158fc6020840196634b5c427760e01b8852604060248601526064850190613f86565b83810360231901604485015290613f86565b600354801561595c57600019016159248161455f565b6130fd576006816000809355826001820155615942600282016150a6565b826005820161595481600385016148f7565b550155600355565b634e487b7160e01b600052603160045260246000fd5b61597e6103208261455f565b6060810160005b60ff811660018111615a855782516159bc92916001600160a01b039182906159ae90839061501b565b51166159c1575b50506148c2565b615985565b611df4615a01826104828560008a6159eb615a7e996159e460039788945161501b565b5116615840565b01556159e46159f9876156dc565b968b5161501b565b9160405180936020927001434b7103637b7b81490283630bcb2b91607d1b84840152770103430b9903a30b13632a4b21031b430b733b2b2103a37960451b603191615a5481518092888689019101613f63565b840191820152615a6f60499483519384918785019101613f63565b0103602981018452018261449c565b38806159b5565b5050506020018051906006918281101561120d57600203615bc3575050600454801561595c5760001901615acc615abb826140bf565b8154906000199060031b1b19169055565b6004555b600354600019810191908211610be857615b0c604051615aef816143c0565b600b81526a4d6f73746c7920646f6e6560a81b6020820152615886565b808214615b935781816040926003615b7e6060615b4c6103207f9003df9102c82cb1355f80d0db09c128787aa2adde042a70815408301544fb419961455f565b615b5981614b0a8761455f565b01602060018060a01b03918585615b738584515116615840565b015551015116615840565b015582519182526020820152a161494961590e565b5050615b9d61590e565b614949604051615bac816143c0565b6005815264446f6e652160d81b6020820152615886565b80518281101561120d57600303615bf8575050600554801561595c5760001901615bef615abb826140a4565b6005555b615ad0565b80518281101561120d57600403615c2957508054801561595c576000190190615c23615abb83614089565b55615ad0565b519081101561120d57600503615bf357600754801561595c5760001901615c52615abb82614058565b600755615ad056fed17d8739fe3acc1dc0c68b41b05c158c4e79ff275a9837ed7e4392187a9131385fa2981883a0eb955b46a348c82ded0ab4547248db521daa81e70d4ecb5aa2152de3400c5320d2aca62a876730addbd498e102edf4a9fbb7cb99d7f1d6b560105b5f696e6974426f6172645d2041737369676e65642070696563657320746f20965f36ee13ee10e23fe4feecd10920f77a590acde04bd54d0274d1cd6487795d040b6e4d98acb52cfb61a8beb8587bf37d362f8afc07142f5211d2c386f09f2da2646970667358221220e17d1a5a4d2376573dcbaf2893ffc2419ce6131d0650cc321a9eb9722c1bbf5064736f6c63430008160033';

type MysteryChineseChessConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MysteryChineseChessConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MysteryChineseChess__factory extends ContractFactory {
  constructor(...args: MysteryChineseChessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(overrides?: PayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: PayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MysteryChineseChess & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MysteryChineseChess__factory {
    return super.connect(runner) as MysteryChineseChess__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MysteryChineseChessInterface {
    return new Interface(_abi) as MysteryChineseChessInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MysteryChineseChess {
    return new Contract(address, _abi, runner) as unknown as MysteryChineseChess;
  }
}
